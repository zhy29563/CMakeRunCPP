#include <iostream>
using namespace std;

/**********************************************************************************************************************
 * 指针
 *  指针的作用：
 *      可以通过指针间接访问内存
 *          - 内存编号是从0开始记录的，一般用十六进制数字表示
 *          - 可以利用指针变量保存地址
 *
 *  指针变量的定义和使用
 *      指针变量定义语法：
 *          数据类型 * 变量名；
 *
 *  指针变量和普通变量的区别
 *      - 普通变量存放的是数据,指针变量存放的是地址
 *      - 指针变量可以通过" * "操作符，操作指针变量指向的内存空间，这个过程称为解引用
 *
 *  总结1：
 *      我们可以通过 & 符号 获取变量的地址
 *  总结2：
 *      利用指针可以记录地址
 *  总结3：
 *      对指针变量解引用，可以操作指针指向的内存
 *
 *
 *  指针所占内存空间
 *      提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？
 *      总结：所有指针类型在32位操作系统下是4个字节
 *
 *
 *  空指针和野指针
 *      空指针：指针变量指向内存中编号为0的空间
 *          用途：初始化指针变量
 *          注意：空指针指向的内存是不可以访问的
 *      野指针：指针变量指向非法的内存空间
 *      总结：空指针和野指针都不是我们申请的空间，因此不要访问。
 *********************************************************************************************************************/

int main()
{
    // 定义与使用
    {
        // 1、指针的定义
        int a = 10; //定义整型变量a

        //指针定义语法： 数据类型 * 变量名 ;
        int *p;

        //指针变量赋值
        p = &a;             //指针指向变量a的地址
        cout << &a << endl; //打印数据a的地址
        cout << p << endl;  //打印指针变量p

        // 2、指针的使用
        //通过*操作指针变量指向的内存
        cout << "*p = " << *p << endl;
    }

    // 指针所占的内存空间
    {
        int a = 10;

        int *p;
        p = &a; //指针指向数据a的地址

        cout << *p << endl; //* 解引用
        cout << sizeof(p) << endl;
        cout << sizeof(char *) << endl;
        cout << sizeof(float *) << endl;
        cout << sizeof(double *) << endl;
    }

    // 空指针
    {
        //指针变量p指向内存地址编号为0的空间
        int *p = NULL;

        //访问空指针报错
        //内存编号0 ~255为系统占用内存，不允许用户访问
        cout << *p << endl;
    }

    // 野指针
    {
        //指针变量p指向内存地址编号为0x1100的空间
        int *p = (int *)0x1100;

        //访问野指针报错
        cout << *p << endl;
    }
    system("pause");
    return 0;
}