#include <iostream>
using namespace std;

/**********************************************************************************************************************
 * 构造函数的分类及调用
 *  两种分类方式：
 *      按参数分为：
 *          - 有参构造
 *          - 无参构造
 *
 *      按类型分为：
 *          - 普通构造
 *          - 拷贝构造
 *
 *  三种调用方式：
 *      - 括号法
 *      - 显示法
 *      - 隐式转换法
 *********************************************************************************************************************/

class Person
{
public:
    //无参（默认）构造函数
    Person()
    {
        cout << "无参构造函数! " << this->age << endl;
    }

    //有参构造函数
    Person(int a)
    {
        age = a;
        cout << "有参构造函数! " << this->age << endl;
    }

    //拷贝构造函数
    Person(const Person &p)
    {
        age = p.age;
        cout << "拷贝构造函数! " << this->age << endl;
    }

    //析构函数
    ~Person()
    {
        cout << "析构函数! " << this->age << endl;
    }

public:
    int age = -999;
};

int main()
{
    // 调用无参构造函数
    {
        Person p; //调用无参构造函数

        //注意：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明
        // Person p2();
    }

    // 调用有参的构造函数
    {
        cout << "=================================================" << endl;
        cout << "括号法" << endl;
        Person p1(10);

        cout << "=================================================" << endl;
        cout << "显式法" << endl;
        Person p2 = Person(20);
        Person p3 = Person(p2);

        cout << "=================================================" << endl;
        cout << "非拷贝构造创建的匿名对象" << endl;
        // 当前行结束之后，马上析构
        Person(30);

        cout << "=================================================" << endl;
        cout << "隐式转换法" << endl;
        Person p4 = 40; // Person p4 = Person(40);
        Person p5 = p4; // Person p5 = Person(p4);

        cout << "=================================================" << endl;
        cout << "拷贝构造创建的匿名对象，编译器认为是对象声明" << endl;
        //注意2：不能利用 拷贝构造函数 初始化 匿名 对象，编译器认为是对象声明
        // Person(p4);
    }
    system("pause");
    return 0;
}